from .configuration import Configuration\"""Configuration space of a robot model.\"\"\n\nfrom typing import Optional\n\nimport mujoco\nimport numpy as np\n\nfrom . import constants as consts\nfrom . import exceptions\nfrom .lie import SE3, SO3\n\n\nclass Configuration:\n    \"\"\Encapsulates a model and data for convenient access to kinematic quantities.\"\"\n\n    def __init__(self, model: mujoco.MjModel, q: Optional[np.ndarray] = None):\n        \"\"\Constructor.\"\"\n        self.model = model\n        self.data = mujoco.MjData(model)\n        self.update(q=q)\n\n    def update(self, q: Optional[np.ndarray] = None) -> None:\n        \"\"\Run forward kinematics.\"\"\n        if q is not None:\n            self.data.qpos = q\n        mujoco.mj_kinematics(self.model, self.data)\n        mujoco.mj_comPos(self.model, self.data)\n\n    def update_from_keyframe(self, key_name: str) -> None:\n        \"\"\Update the configuration from a keyframe.\"\"\n        key_id = mujoco.mj_name2id(self.model, mujoco.mjtObj.mjOBJ_KEY, key_name)\n        if key_id == -1:\n            raise exceptions.InvalidKeyframe(key_name, self.model)\n        self.update(q=self.model.key_qpos[key_id])\n\n    def check_limits(self, tol: float = 1e-6, safety_break: bool = True) -> None:\n        \"\"\Check that the current configuration is within bounds.\"\"\n        for jnt in range(self.model.njnt):\n            jnt_type = self.model.jnt_type[jnt]\n            if jnt_type == mujoco.mjtJoint.mjJNT_FREE or not self.model.jnt_limited[jnt]:\n                continue\n            padr = self.model.jnt_qposadr[jnt]\n            qval = self.data.qpos[padr]\n            qmin = self.model.jnt_range[jnt, 0]\n            qmax = self.model.jnt_range[jnt, 1]\n            if qval < qmin - tol or qval > qmax + tol:\n                if safety_break:\n                    raise exceptions.NotWithinConfigurationLimits(joint_id=jnt, value=qval, lower=qmin, upper=qmax, model=self.model)\n                else:\n                    print(f\